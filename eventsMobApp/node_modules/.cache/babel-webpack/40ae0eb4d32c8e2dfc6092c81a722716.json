{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './component-loader';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Injector, ComponentFactoryResolver, Injectable, ApplicationRef, NgZone } from '@angular/core';\nimport { Params } from './params';\nimport { ComponentLoader } from './component-loader';\n/**\n * @object AlertDialogFactory\n */\n\nvar AlertDialogFactory =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  function AlertDialogFactory(_injector, _resolver, _appRef, _componentLoader, _zone) {\n    this._injector = _injector;\n    this._resolver = _resolver;\n    this._appRef = _appRef;\n    this._componentLoader = _componentLoader;\n    this._zone = _zone;\n  }\n\n  AlertDialogFactory.prototype.createAlertDialog = function (componentType, params) {\n    var _this = this;\n\n    if (params === void 0) {\n      params = {};\n    }\n\n    console.warn('[ngx-onsenui] AlertDialogFactory is deprecated since 4.0.0-rc.0. Place <ons-alert-dialog> into your component instead.');\n    return new Promise(function (resolve) {\n      setImmediate(function () {\n        _this._zone.run(function () {\n          var factory = _this._resolver.resolveComponentFactory(componentType);\n\n          var injector = Injector.create({\n            providers: [{\n              provide: Params,\n              useValue: new Params(params)\n            }],\n            parent: _this._injector\n          });\n          var componentRef = factory.create(injector);\n          var rootElement = componentRef.location.nativeElement;\n\n          _this._componentLoader.load(componentRef);\n\n          var element = rootElement.children[0];\n          var alertDialogElement = element.tagName === 'ONS-ALERT-DIALOG' ? element : element.querySelector('ons-alert-dialog');\n\n          if (!alertDialogElement) {\n            throw Error('<ons-alert-dialog> element is not found in component\\'s template.');\n          }\n\n          resolve({\n            alertDialog: alertDialogElement,\n            destroy: function destroy() {\n              return componentRef.destroy();\n            }\n          });\n        });\n      });\n    });\n  };\n\n  AlertDialogFactory = __decorate([__metadata(\"design:paramtypes\", [Injector, ComponentFactoryResolver, ApplicationRef, ComponentLoader, NgZone])], AlertDialogFactory);\n\n  AlertDialogFactory.ɵfac = function AlertDialogFactory_Factory(t) {\n    return new (t || AlertDialogFactory)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc1.ComponentLoader), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  AlertDialogFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: AlertDialogFactory,\n    factory: function factory(t) {\n      return AlertDialogFactory.ɵfac(t);\n    }\n  });\n  return AlertDialogFactory;\n}();\n\nexport { AlertDialogFactory }; //# sourceMappingURL=alert-dialog-factory.js.map","map":null,"metadata":{},"sourceType":"module"}