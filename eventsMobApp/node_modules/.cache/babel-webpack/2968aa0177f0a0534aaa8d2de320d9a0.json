{"ast":null,"code":"import _toArray from \"C:/Users/DELL/Desktop/fatna belkhou/O-Live-master/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _toConsumableArray from \"C:/Users/DELL/Desktop/fatna belkhou/O-Live-master/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/DELL/Desktop/fatna belkhou/O-Live-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/DELL/Desktop/fatna belkhou/O-Live-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { queueScheduler, asyncScheduler } from 'rxjs';\nimport { tap, subscribeOn, observeOn } from 'rxjs/operators';\nimport { InjectionToken, Version, isDevMode, NgZone, Optional, VERSION as VERSION$1, NgModule, Inject, PLATFORM_ID } from '@angular/core';\nimport firebase from 'firebase/app';\nimport * as ɵngcc0 from '@angular/core';\n\nfunction noop() {}\n/**\n * Schedules tasks so that they are invoked inside the Zone that is passed in the constructor.\n */\n// tslint:disable-next-line:class-name\n\n\nvar ɵZoneScheduler = /*#__PURE__*/function () {\n  function ɵZoneScheduler(zone) {\n    var delegate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : queueScheduler;\n\n    _classCallCheck(this, ɵZoneScheduler);\n\n    this.zone = zone;\n    this.delegate = delegate;\n  }\n\n  _createClass(ɵZoneScheduler, [{\n    key: \"now\",\n    value: function now() {\n      return this.delegate.now();\n    }\n  }, {\n    key: \"schedule\",\n    value: function schedule(work, delay, state) {\n      var targetZone = this.zone; // Wrap the specified work function to make sure that if nested scheduling takes place the\n      // work is executed in the correct zone\n\n      var workInZone = function workInZone(state) {\n        var _this = this;\n\n        targetZone.runGuarded(function () {\n          work.apply(_this, [state]);\n        });\n      }; // Scheduling itself needs to be run in zone to ensure setInterval calls for async scheduling are done\n      // inside the correct zone. This scheduler needs to schedule asynchronously always to ensure that\n      // firebase emissions are never synchronous. Specifying a delay causes issues with the queueScheduler delegate.\n\n\n      return this.delegate.schedule(workInZone, delay, state);\n    }\n  }]);\n\n  return ɵZoneScheduler;\n}(); // tslint:disable-next-line:class-name\n\n\nvar ɵBlockUntilFirstOperator = /*#__PURE__*/function () {\n  function ɵBlockUntilFirstOperator(zone) {\n    _classCallCheck(this, ɵBlockUntilFirstOperator);\n\n    this.zone = zone;\n    this.task = null;\n  }\n\n  _createClass(ɵBlockUntilFirstOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var unscheduleTask = this.unscheduleTask.bind(this);\n      this.task = this.zone.run(function () {\n        return Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop);\n      });\n      return source.pipe(tap({\n        next: unscheduleTask,\n        complete: unscheduleTask,\n        error: unscheduleTask\n      })).subscribe(subscriber).add(unscheduleTask);\n    }\n  }, {\n    key: \"unscheduleTask\",\n    value: function unscheduleTask() {\n      var _this2 = this;\n\n      // maybe this is a race condition, invoke in a timeout\n      // hold for 10ms while I try to figure out what is going on\n      setTimeout(function () {\n        if (_this2.task != null && _this2.task.state === 'scheduled') {\n          _this2.task.invoke();\n\n          _this2.task = null;\n        }\n      }, 10);\n    }\n  }]);\n\n  return ɵBlockUntilFirstOperator;\n}(); // tslint:disable-next-line:class-name\n\n\nvar ɵAngularFireSchedulers = function ɵAngularFireSchedulers(ngZone) {\n  _classCallCheck(this, ɵAngularFireSchedulers);\n\n  this.ngZone = ngZone;\n  this.outsideAngular = ngZone.runOutsideAngular(function () {\n    return new ɵZoneScheduler(Zone.current);\n  });\n  this.insideAngular = ngZone.run(function () {\n    return new ɵZoneScheduler(Zone.current, asyncScheduler);\n  });\n};\n/**\n * Operator to block the zone until the first value has been emitted or the observable\n * has completed/errored. This is used to make sure that universal waits until the first\n * value from firebase but doesn't block the zone forever since the firebase subscription\n * is still alive.\n */\n\n\nfunction ɵkeepUnstableUntilFirstFactory(schedulers) {\n  return function keepUnstableUntilFirst(obs$) {\n    obs$ = obs$.lift(new ɵBlockUntilFirstOperator(schedulers.ngZone));\n    return obs$.pipe( // Run the subscribe body outside of Angular (e.g. calling Firebase SDK to add a listener to a change event)\n    subscribeOn(schedulers.outsideAngular), // Run operators inside the angular zone (e.g. side effects via tap())\n    observeOn(schedulers.insideAngular) // INVESTIGATE https://github.com/angular/angularfire/pull/2315\n    // share()\n    );\n  };\n} // DEBUG quick debugger function for inline logging that typescript doesn't complain about\n//       wrote it for debugging the ɵlazySDKProxy, commenting out for now; should consider exposing a\n//       verbose mode for AngularFire in a future release that uses something like this in multiple places\n//       usage: () => log('something') || returnValue\n// const log = (...args: any[]): false => { console.log(...args); return false }\n// The problem here are things like ngOnDestroy are missing, then triggering the service\n// rather than dig too far; I'm capturing these as I go.\n\n\nvar noopFunctions = ['ngOnDestroy']; // INVESTIGATE should we make the Proxy revokable and do some cleanup?\n//             right now it's fairly simple but I'm sure this will grow in complexity\n\nvar ɵlazySDKProxy = function ɵlazySDKProxy(klass, observable, zone) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return new Proxy(klass, {\n    get: function get(_, name) {\n      return zone.runOutsideAngular(function () {\n        var _a;\n\n        if (klass[name]) {\n          if ((_a = options === null || options === void 0 ? void 0 : options.spy) === null || _a === void 0 ? void 0 : _a.get) {\n            options.spy.get(name, klass[name]);\n          }\n\n          return klass[name];\n        }\n\n        if (noopFunctions.indexOf(name) > -1) {\n          return function () {};\n        }\n\n        var promise = observable.toPromise().then(function (mod) {\n          var ret = mod && mod[name]; // TODO move to proper type guards\n\n          if (typeof ret === 'function') {\n            return ret.bind(mod);\n          } else if (ret && ret.then) {\n            return ret.then(function (res) {\n              return zone.run(function () {\n                return res;\n              });\n            });\n          } else {\n            return zone.run(function () {\n              return ret;\n            });\n          }\n        }); // recurse the proxy\n\n        return new Proxy(function () {}, {\n          get: function get(_, name) {\n            return promise[name];\n          },\n          // TODO handle callbacks as transparently as I can\n          apply: function apply(self, _, args) {\n            return promise.then(function (it) {\n              var _a;\n\n              var res = it && it.apply(void 0, _toConsumableArray(args));\n\n              if ((_a = options === null || options === void 0 ? void 0 : options.spy) === null || _a === void 0 ? void 0 : _a.apply) {\n                options.spy.apply(name, args, res);\n              }\n\n              return res;\n            });\n          }\n        });\n      });\n    }\n  });\n};\n\nvar ɵapplyMixins = function ɵapplyMixins(derivedCtor, constructors) {\n  constructors.forEach(function (baseCtor) {\n    Object.getOwnPropertyNames(baseCtor.prototype || baseCtor).forEach(function (name) {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype || baseCtor, name));\n    });\n  });\n};\n\nvar FIREBASE_OPTIONS = new InjectionToken('angularfire2.app.options');\nvar FIREBASE_APP_NAME = new InjectionToken('angularfire2.app.nameOrConfig'); // Have to implement as we need to return a class from the provider, we should consider exporting\n// this in the firebase/app types as this is our highest risk of breaks\n\nvar FirebaseApp = function FirebaseApp() {\n  _classCallCheck(this, FirebaseApp);\n};\n\nvar VERSION = new Version('6.1.5');\n\nfunction ɵfirebaseAppFactory(options, zone, nameOrConfig) {\n  var name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';\n  var config = typeof nameOrConfig === 'object' && nameOrConfig || {};\n  config.name = config.name || name; // Added any due to some inconsistency between @firebase/app and firebase types\n\n  var existingApp = firebase.apps.filter(function (app) {\n    return app && app.name === config.name;\n  })[0]; // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any\n  // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206\n\n  var app = existingApp || zone.runOutsideAngular(function () {\n    return firebase.initializeApp(options, config);\n  });\n\n  try {\n    if (JSON.stringify(options) !== JSON.stringify(app.options)) {\n      var hmr = !!module.hot;\n      log('error', \"\".concat(app.name, \" Firebase App already initialized with different options\").concat(hmr ? ', you may need to reload as Firebase is not HMR aware.' : '.'));\n    }\n  } catch (e) {}\n\n  return app;\n}\n\nvar ɵlogAuthEmulatorError = function ɵlogAuthEmulatorError() {\n  // TODO sort this out, https://github.com/angular/angularfire/issues/2656\n  log('warn', 'You may need to import \\'firebase/auth\\' manually in your component rather than rely on AngularFireAuth\\'s dynamic import, when using the emulator suite https://github.com/angular/angularfire/issues/2656');\n};\n\nvar log = function log(level) {\n  if (isDevMode() && typeof console !== 'undefined') {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_console = console)[level].apply(_console, args);\n  }\n};\n\nvar ɵ0 = log;\nglobalThis.ɵAngularfireInstanceCache || (globalThis.ɵAngularfireInstanceCache = new Map());\n\nfunction ɵfetchInstance(cacheKey, moduleName, app, fn, args) {\n  var _ref = globalThis.ɵAngularfireInstanceCache.get(cacheKey) || [],\n      _ref2 = _toArray(_ref),\n      instance = _ref2[0],\n      cachedArgs = _ref2.slice(1);\n\n  if (instance) {\n    try {\n      if (args.some(function (arg, i) {\n        var cachedArg = cachedArgs[i];\n\n        if (arg && typeof arg === 'object') {\n          return JSON.stringify(arg) !== JSON.stringify(cachedArg);\n        } else {\n          return arg !== cachedArg;\n        }\n      })) {\n        var hmr = !!module.hot;\n        log('error', \"\".concat(moduleName, \" was already initialized on the \").concat(app.name, \" Firebase App instance with different settings.\").concat(hmr ? ' You may need to reload as Firebase is not HMR aware.' : ''));\n      }\n    } catch (e) {}\n\n    return instance;\n  } else {\n    var newInstance = fn();\n    globalThis.ɵAngularfireInstanceCache.set(cacheKey, [newInstance].concat(_toConsumableArray(args)));\n    return newInstance;\n  }\n}\n\nvar FIREBASE_APP_PROVIDER = {\n  provide: FirebaseApp,\n  useFactory: ɵfirebaseAppFactory,\n  deps: [FIREBASE_OPTIONS, NgZone, [new Optional(), FIREBASE_APP_NAME]]\n};\n\nvar AngularFireModule = /*@__PURE__*/function () {\n  var AngularFireModule = /*#__PURE__*/function () {\n    // tslint:disable-next-line:ban-types\n    function AngularFireModule(platformId) {\n      _classCallCheck(this, AngularFireModule);\n\n      firebase.registerVersion('angularfire', VERSION.full, platformId.toString());\n      firebase.registerVersion('angular', VERSION$1.full);\n    }\n\n    _createClass(AngularFireModule, null, [{\n      key: \"initializeApp\",\n      value: function initializeApp(options, nameOrConfig) {\n        return {\n          ngModule: AngularFireModule,\n          providers: [{\n            provide: FIREBASE_OPTIONS,\n            useValue: options\n          }, {\n            provide: FIREBASE_APP_NAME,\n            useValue: nameOrConfig\n          }]\n        };\n      }\n    }]);\n\n    return AngularFireModule;\n  }();\n\n  AngularFireModule.ɵfac = function AngularFireModule_Factory(t) {\n    return new (t || AngularFireModule)(ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  AngularFireModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: AngularFireModule\n  });\n  AngularFireModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [FIREBASE_APP_PROVIDER]\n  });\n  return AngularFireModule;\n}();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AngularFireModule, FIREBASE_APP_NAME, FIREBASE_OPTIONS, FirebaseApp, VERSION, ɵ0, ɵAngularFireSchedulers, ɵBlockUntilFirstOperator, ɵZoneScheduler, ɵapplyMixins, ɵfetchInstance, ɵfirebaseAppFactory, ɵkeepUnstableUntilFirstFactory, ɵlazySDKProxy, ɵlogAuthEmulatorError }; //# sourceMappingURL=angular-fire.js.map","map":null,"metadata":{},"sourceType":"module"}