{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Directive, ElementRef, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n/**\n * @element ons-radio\n * @directive OnsRadio\n * @selector ons-radio\n * @description\n *   [en]Angular directive for `<ons-radio>` component. You can use `[(ngModel)]` to synchronize the value of `[(ngModel)]` with the selected value.[/en]\n *   [ja]`<ons-radio>`要素のAngularディレクティブです。 `[(ngModel)]` を使用すると、 `[(ngModel)]` の値を選択された値と同期することができます。[/ja]\n * @example\n *   <ons-radio value=\"Item A\" [(ngModel)]=\"selectedValue\"></ons-radio>\n *   <ons-radio value=\"Item B\" [(ngModel)]=\"selectedValue\"></ons-radio>\n *   <ons-radio value=\"Item C\" [(ngModel)]=\"selectedValue\"></ons-radio>\n */\n\nvar OnsRadio =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  function OnsRadio(_elementRef) {\n    this._elementRef = _elementRef;\n\n    this._propagateChange = function (_) {};\n\n    this._boundOnChange = this._onChange.bind(this);\n    this._element = _elementRef.nativeElement;\n\n    this._element.addEventListener('change', this._boundOnChange);\n  }\n\n  OnsRadio_1 = OnsRadio;\n\n  OnsRadio.prototype._onChange = function (event) {\n    var _a = event.target,\n        value = _a.value,\n        checked = _a.checked;\n    checked && this._propagateChange(value);\n  };\n\n  Object.defineProperty(OnsRadio.prototype, \"element\", {\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OnsRadio.prototype, \"nativeElement\", {\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  OnsRadio.prototype.ngOnDestroy = function () {\n    this._element.removeEventListener('change', this._boundOnChange);\n\n    this._element = null;\n  };\n\n  OnsRadio.prototype.writeValue = function (obj) {\n    this._element.checked = obj === this._element.value;\n  };\n\n  OnsRadio.prototype.registerOnChange = function (fn) {\n    this._propagateChange = fn;\n  };\n\n  OnsRadio.prototype.registerOnTouched = function () {};\n\n  var OnsRadio_1;\n  OnsRadio = OnsRadio_1 = __decorate([__metadata(\"design:paramtypes\", [ElementRef])], OnsRadio);\n\n  OnsRadio.ɵfac = function OnsRadio_Factory(t) {\n    return new (t || OnsRadio)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  OnsRadio.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: OnsRadio,\n    selectors: [[\"ons-radio\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return OnsRadio_1;\n      }),\n      multi: true\n    }])]\n  });\n  return OnsRadio;\n}();\n\nexport { OnsRadio }; //# sourceMappingURL=ons-radio.js.map","map":null,"metadata":{},"sourceType":"module"}