{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Injectable, ApplicationRef } from '@angular/core';\n\nvar ComponentLoader =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  function ComponentLoader(appRef) {\n    this.appRef = appRef;\n  } // Load an instance of ComponentRef in app view.\n\n\n  ComponentLoader.prototype.load = function (componentRef) {\n    var _this = this;\n\n    var rootElement = componentRef.location.nativeElement;\n\n    if (this.appRef.attachView) {\n      this.appRef.attachView(componentRef.hostView);\n      componentRef.onDestroy(function () {\n        _this.appRef.detachView(componentRef.hostView);\n\n        if (rootElement.parentNode) {\n          rootElement.parentNode.removeChild(rootElement);\n        }\n      });\n    } else {\n      if (this.appRef.registerChangeDetector) {\n        this.appRef.registerChangeDetector(componentRef.changeDetectorRef);\n      }\n\n      componentRef.onDestroy(function () {\n        if (_this.appRef.unregisterChangeDetector) {\n          _this.appRef.unregisterChangeDetector(componentRef.changeDetectorRef);\n        }\n\n        if (rootElement.parentNode) {\n          rootElement.parentNode.removeChild(rootElement);\n        }\n      });\n    }\n\n    var rootContainer = this.appRef.components[0].location.nativeElement;\n    rootContainer.appendChild(rootElement);\n  };\n\n  ComponentLoader = __decorate([__metadata(\"design:paramtypes\", [ApplicationRef])], ComponentLoader);\n\n  ComponentLoader.ɵfac = function ComponentLoader_Factory(t) {\n    return new (t || ComponentLoader)(ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef));\n  };\n\n  ComponentLoader.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ComponentLoader,\n    factory: function factory(t) {\n      return ComponentLoader.ɵfac(t);\n    }\n  });\n  return ComponentLoader;\n}();\n\nexport { ComponentLoader }; //# sourceMappingURL=component-loader.js.map","map":null,"metadata":{},"sourceType":"module"}